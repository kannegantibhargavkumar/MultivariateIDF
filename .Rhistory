# using source code
setwd("F:/Research Work/Synchronization work/work_R/MultivariateIDFwork")
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
data=data_n[,i]
listtemp=marginal_fit(data)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sm","rf","sf")
View(uni_fit)
uni_fit[["sm"]]
## Model fitting
# using source code
setwd("F:/Research Work/Synchronization work/work_R/MultivariateIDFwork")
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
da=as.matrix(data_n[,i])
listtemp=marginal_fit(da)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sf","surge","rf","sm")
# bivariate fitting
# correlation matrix
tau_uk=cor(data_n, method = "kendall")
#####
library("readxl")
library("fitur")
library("evd")
library(readr)
library(copula)
library(snpar)
library(ggplot2)
library(Ternary)
library(plotly)
library(ggtern)
library(kSamples)
#library(ggplot2)
set.seed(417)
#####
#Importing the dataset
setwd("F:/Research Work/Synchronization work/Multivariate IDF/Krishna basin work/data_input")
ams_warunji=read_excel("ams_warunji.xlsx") # the annual maxima series
ams=subset(ams_warunji,select = c("sm","rf","sf"))
normalize=function(data){
data_n=(data-min(data))/(max(data)-min(data))
}
# normalizing the data
data_n=matrix(data=NA, nrow=35, ncol=3)
for(i in 1:3){
data_n[,i]=normalize(as.matrix(ams[,i]))
}
#check this later
data_n=as.data.frame(data_n)
colnames(data_n)=c("SoilMoisture","Rainfall", "Streamflow")
## kendall correlation
tau=cor(data_n, method="kendall")
### plots
######
par(mar = c(5, 4, 4, 4) + 0.3)              # Additional space for second y-axis
## Model fitting
# using source code
setwd("F:/Research Work/Synchronization work/work_R/MultivariateIDFwork")
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
da=as.matrix(data_n[,i])
listtemp=marginal_fit(da)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sf","surge","rf","sm")
View(ams_warunji)
View(ams_warunji)
View(ams)
View(ams)
View(ams)
View(ams)
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
da=as.matrix(data_n[,i])
listtemp=marginal_fit(da)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sm","rf","sf")
View(uni_fit)
View(uni_fit)
View(uni_fit)
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
da=as.matrix(data_n[,i])
listtemp=marginal_fit(da)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sm","rf","sf")
View(uni_fit)
## Model fitting
# using source code
setwd("F:/Research Work/Synchronization work/work_R/MultivariateIDFwork")
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
da=as.matrix(data_n[,i])
listtemp=marginal_fit(da)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sm","rf","sf")
View(uni_fit)
data=data_n[:,1]
data=data_n[,1]
fit=fgev(as.matrix(data), std.err = TRUE)
fit
data=data_n[,2]
fit=fgev(as.matrix(data), std.err = TRUE)
fit
data=ams[,1]
fit=fgev(as.matrix(data), std.err = TRUE)
fit
data=ams[,2]
fit=fgev(as.matrix(data), std.err = TRUE)
fit
data=ams[,3]
fit=fgev(as.matrix(data), std.err = TRUE)
fit
View(uni_fit)
View(uni_fit[["sm"]][["hypothesis"]])
View(uni_fit[["rf"]][["hypothesis"]])
View(uni_fit[["sf"]][["hypothesis"]])
plot(fit)
plot(fit)
plot(fit)
View(ams)
View(ams)
data=ams[,1]
fit=fgev(as.matrix(data), std.err = TRUE)
plot(fit)
data=ams[,2]
fit=fgev(as.matrix(data), std.err = TRUE)
plot(fit)
# bivariate fitting
# correlation matrix
tau_uk=cor(data_n, method = "kendall")
# correlation test
k_sfsurge=cor.test(data$Surge,data$SF, method="kendall")
# correlation test
k_sfsm=cor.test(data$SF,data$SM,method="kendall")
data=ams
View(data)
View(data)
# correlation test
k_sfsm=cor.test(ams$sm,ams$sf,method="kendall")
# correlation test
k_sfsm=cor.test(ams$sm,ams$sf,method="kendall")
k_sfrf=cor.test(ams$sf,ams$rf,method="kendall")
k_rfsm=cor.test(ams$sm,ams$rf,method="kendall")
View(k_rfsm)
View(k_rfsm)
View(k_sfsm)
View(k_sfrf)
View(k_sfsm)
View(k_sfrf)
View(k_rfsm)
bi_data=list(cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["rf"]][["CDF"]]),
cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["sm"]][["CDF"]]))
names(bi_data)=c("sfrf","sfsm")
source("copula_fit.r")
source("kendall_functions.r")
bi_fit=list()
kt_dist=list()
rt=list()
for(i in 1:2){
data_temp=bi_data[[i]]
fit_temp=bifit(data_temp)
model=fit_temp$model
t=fit_temp[["simulated cdf"]][,4]
kt_e=kendall_dist(model,t)
bi_fit=append(bi_fit,list(fit_temp))
rt_f=1/(1-kt_e)
kt_dist=append(kt_dist,list(kt_e))
rt=append(rt,list(rt_f))
}
names(rt)=c("sfrf","sfsurge","sfsm")
names(rt)=c("sfrf","sfsm")
names(bi_fit)=c("sfrf","sfsm")
View(bi_fit)
View(bi_fit)
View(bi_fit[["sfrf"]][["hypothesis test"]])
View(bi_fit[["sfsm"]][["hypothesis test"]])
View(ams)
View(ams)
View(ams_warunji)
ams=subset(ams_warunji,select = c("sm","rf","sf"))
ams[24,1]=c(0.462)
ams[24,2]=c(124.25268)
ams[24,3]=c(9378.232)
normalize=function(data){
data_n=(data-min(data))/(max(data)-min(data))
}
# normalizing the data
data_n=matrix(data=NA, nrow=35, ncol=3)
for(i in 1:3){
data_n[,i]=normalize(as.matrix(ams[,i]))
}
#check this later
data_n=as.data.frame(data_n)
colnames(data_n)=c("SoilMoisture","Rainfall", "Streamflow")
## kendall correlation
tau=cor(data_n, method="kendall")
View(tau)
## Model fitting
# using source code
setwd("F:/Research Work/Synchronization work/work_R/MultivariateIDFwork")
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
da=as.matrix(data_n[,i])
listtemp=marginal_fit(da)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sm","rf","sf")
View(uni_fit)
# bivariate fitting
# correlation matrix
tau_uk=cor(data_n, method = "kendall")
# correlation test
k_sfsm=cor.test(ams$sm,ams$sf,method="kendall")
k_sfrf=cor.test(ams$sf,ams$rf,method="kendall")
k_rfsm=cor.test(ams$sm,ams$rf,method="kendall")
View(k_sfrf)
View(k_rfsm)
View(k_rfsm)
bi_data=list(cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["rf"]][["CDF"]]),
cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["surge"]][["CDF"]]),
cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["sm"]][["CDF"]]))
names(bi_data)=c("sfrf","sfsurge","sfsm")
source("copula_fit.r")
source("kendall_functions.r")
bi_data=list(cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["rf"]][["CDF"]]),
cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["sm"]][["CDF"]]))
names(bi_data)=c("sfrf","sfsm")
source("copula_fit.r")
source("kendall_functions.r")
bi_fit=list()
kt_dist=list()
rt=list()
for(i in 1:2){
data_temp=bi_data[[i]]
fit_temp=bifit(data_temp)
model=fit_temp$model
t=fit_temp[["simulated cdf"]][,4]
kt_e=kendall_dist(model,t)
bi_fit=append(bi_fit,list(fit_temp))
rt_f=1/(1-kt_e)
kt_dist=append(kt_dist,list(kt_e))
rt=append(rt,list(rt_f))
}
View(uni_fit)
View(uni_fit)
View(uni_fit[["sf"]][["hypothesis"]])
View(uni_fit[["rf"]][["hypothesis"]])
View(uni_fit[["sm"]][["hypothesis"]])
View(uni_fit[["sm"]][["hypothesis"]])
data=ams[,3]
View(ams_warunji)
View(ams)
fit=fgev(as.matrix(data), std.err = TRUE)
fit
data=ams[,3]
fit=fgev(as.matrix(data), std.err = TRUE)
fit
View(ams)
data=ams$sf
fit=fgev(as.matrix(data), std.err = TRUE)
fit
fgev(data)
t=fgev(data)
View(uni_fit)
uni_fit[["sf"]][["RP"]]
uni_fit[["sf"]][["CDF"]]
View(bi_fit)
bi_fit[[1]][["model"]]
bi_fit[[1]][["observed cdf"]]
View(bi_fit[[2]][["observed cdf"]])
View(uni_fit)
View(uni_fit)
uni_fit[["sf"]][["CDF"]]
uni_fit[["sf"]][["RP"]]
write.csv(uni_fit[["sf"]][["RP"]], "F:/Research Work/Synchronization work/Multivariate IDF/Krishna basin work/RP_sF_UNI.csv")
View(bi_fit)
View(bi_fit)
View(rt)
View(rt)
View(rt)
rt[[1]]
bi_fit=list()
kt_dist=list()
rt=list()
for(i in 1:2){
data_temp=bi_data[[i]]
fit_temp=bifit(data_temp)
model=fit_temp$model
t=fit_temp[["simulated cdf"]][,4]
kt_e=kendall_dist(model,t)
bi_fit=append(bi_fit,list(fit_temp))
rt_f=1/(1-kt_e)
kt_dist=append(kt_dist,list(kt_e))
rt=append(rt,list(rt_f))
}
names(rt)=c("sfrf","sfsm")
names(bi_fit)=c("sfrf","sfsm")
## exporting data
#####
library("readxl")
library("fitur")
library("evd")
library(readr)
library(copula)
library(snpar)
library(ggplot2)
library(Ternary)
library(plotly)
library(ggtern)
library(kSamples)
#library(ggplot2)
set.seed(417)
#####
#Importing the dataset
setwd("F:/Research Work/Synchronization work/Multivariate IDF/Krishna basin work/data_input")
ams_warunji=read_excel("ams_warunji.xlsx") # the annual maxima series
ams=subset(ams_warunji,select = c("sm","rf","sf"))
ams[24,1]=c(0.462)
ams[24,2]=c(124.25268)
ams[24,3]=c(9378.232)
normalize=function(data){
data_n=(data-min(data))/(max(data)-min(data))
}
# normalizing the data
data_n=matrix(data=NA, nrow=35, ncol=3)
for(i in 1:3){
data_n[,i]=normalize(as.matrix(ams[,i]))
}
#check this later
data_n=as.data.frame(data_n)
colnames(data_n)=c("SoilMoisture","Rainfall", "Streamflow")
## kendall correlation
tau=cor(data_n, method="kendall")
### plots
######
par(mar = c(5, 4, 4, 4) + 0.3)              # Additional space for second y-axis
plot(ams$sf, ams$sm, pch = 16, col = 2, xlab="", ylab="")              # Create first plot
par(new = TRUE)                             # Add new plot
plot(ams$sf, ams$rf, pch = 17, col = 3,              # Create second plot without axes
axes = FALSE, xlab = "", ylab = "")
axis(side = 4, at = pretty(range(ams$rf)))      # Add second axis
mtext("Rainfall(mm)", side = 4, line = 3)
mtext("Streamflow(cumec)", side=1, line=3) # Add second axis label
mtext("SoilMoisture(mm)", side=2, line=3)
legend(5530,125, legend=c("SoilMoisture","Rainfall"), col=c("Red","Green"), lty=1:2, cex=0.8)
## Model fitting
# using source code
setwd("F:/Research Work/Synchronization work/work_R/MultivariateIDFwork")
source("univariate_fit.R")
uni_fit=list()
for(i in 1:ncol(data_n)){
da=as.matrix(data_n[,i])
listtemp=marginal_fit(da)
uni_fit<- append(uni_fit, list(listtemp))
}
names(uni_fit)=c("sm","rf","sf")
View(uni_fit)
View(uni_fit)
# bivariate fitting
# correlation matrix
tau_uk=cor(data_n, method = "kendall")
# correlation test
k_sfsm=cor.test(ams$sm,ams$sf,method="kendall")
k_sfrf=cor.test(ams$sf,ams$rf,method="kendall")
k_rfsm=cor.test(ams$sm,ams$rf,method="kendall")
bi_data=list(cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["rf"]][["CDF"]]),
cbind(uni_fit[["sf"]][["CDF"]],uni_fit[["sm"]][["CDF"]]))
names(bi_data)=c("sfrf","sfsm")
source("copula_fit.r")
source("kendall_functions.r")
bi_fit=list()
kt_dist=list()
rt=list()
for(i in 1:2){
data_temp=bi_data[[i]]
fit_temp=bifit(data_temp)
model=fit_temp$model
t=fit_temp[["simulated cdf"]][,4]
kt_e=kendall_dist(model,t)
bi_fit=append(bi_fit,list(fit_temp))
rt_f=1/(1-kt_e)
kt_dist=append(kt_dist,list(kt_e))
rt=append(rt,list(rt_f))
}
names(rt)=c("sfrf","sfsm")
names(bi_fit)=c("sfrf","sfsm")
View(rt)
View(bi_fit)
View(bi_fit)
for(i in 1:2){
data_temp=bi_data[[i]]
fit_temp=bifit(data_temp)
model=fit_temp$model
t=fit_temp[["observed cdf"]][,4]
kt_e=kendall_dist(model,t)
bi_fit=append(bi_fit,list(fit_temp))
rt_f=1/(1-kt_e)
kt_dist=append(kt_dist,list(kt_e))
rt=append(rt,list(rt_f))
}
bi_fit=list()
kt_dist=list()
rt=list()
for(i in 1:2){
data_temp=bi_data[[i]]
fit_temp=bifit(data_temp)
model=fit_temp$model
t=fit_temp[["observed cdf"]][,4]
kt_e=kendall_dist(model,t)
bi_fit=append(bi_fit,list(fit_temp))
rt_f=1/(1-kt_e)
kt_dist=append(kt_dist,list(kt_e))
rt=append(rt,list(rt_f))
}
View(rt)
rt[[1]]
View(kt_e)
kt_e
View(kt_dist)
kt_dist[[1]]
kt_dist[[2]]
View(rt)
rt[[2]]
View(bi_fit)
View(bi_fit)
View(bi_fit)
bi_fit[[1]][["observed cdf"]][["F_bi"]]
View(ams)
View(ams_warunji)
>install.packages(~devtools~)
install.packages(~devtools~)
install.packages("~devtools~")
library(devtools)
install_github(repo=~pREC~, user=~alessio-pugliese~)
# disussion
library(readxl)
data=read_excel("F:\Research Work\Synchronization work\Regional envelope curve apporach\data\sf_neel.xlsx")
data=read_excel("F:/Research Work/Synchronization work/Regional envelope curve apporach/data/sf_neel.xlsx")
sf_neel.xlsx
data=read_excel("F:/Research Work/Synchronization work/Regional envelope curve apporach/data/sf_neel.xlsx")
View(data)
library(tseries)
install.packages("tseries")
library(tseries)
adf.test(data[,2])
data[,2]
adf.test(as.vector(data[,2]))
as.vector(data[,2])
as.matrix(data[,2])
adf.test(as.matrix(data[,2]))
kpss.test(as.matrix(data[,2]))
pp.test(as.matrix(data[,2]))
library(evd)
library(evd)
View(ams_warunji)
# disussion
library(readxl)
library(tseries)
library(evd)
data=read_excel("F:/Research Work/Synchronization work/Regional envelope curve apporach/data/sf_neel.xlsx")
View(data)
# now we will divide series
data_2012=data[,1:28]
# now we will divide series
data_2012=data[1:28,]
View(data_2012)
sf_2012=as.matrix(data$discharge)
View(sf_2012)
fit=fgev(sf_2012)
fit
##
data_2017=data[1:33,]
sf_2017=as.matrix(data$discharge)
View(sf_2012)
##
data_2017=data[1:33,]
sf_2017=as.matrix(data_2017$discharge)
sf_2012=as.matrix(data_2012$discharge)
fit=fgev(sf_2012)
AIC(fit)
fit_2012=fgev(sf_2012)
AIC(fit_2012)
fit_2017=fgev(sf_2017)
AIC(fit_2017)
fit_2012
fit_2012=fgev(sf_2012, type="gumbel")
fit_2012=fevd(sf_2012, type="gumbel")
install.packages("extRemes")
library(extRemes)
library(extRemes)
fit_2012=fevd(sf_2012, type="gumbel")
fit_2012=fevd(sf_2012, type="Gumbel")
fit_2012
fit_2017=fevd(sf_2017, type="Gumbel")
fit_2017
fit=fevd(data$discharge, type="Gumbel")
fit
